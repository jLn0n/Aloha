"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[206],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(n),c=a,f=u["".concat(s,".").concat(c)]||u[c]||d[c]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9568:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1},i="Aloha",l={unversionedId:"intro",id:"intro",title:"Aloha",description:"The base for the entire library, and the engine that makes it all run.",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/intro",permalink:"/Aloha/docs/intro",draft:!1,editUrl:"https://github.com/thegalaxydev/Aloha/edit/main/docs/intro.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",next:{title:"Bot",permalink:"/Aloha/docs/lib/bot"}},s={},m=[{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"Run",id:"run",level:3},{value:"RegisterDefaultCommands",id:"registerdefaultcommands",level:3},{value:"RegisterCommandsIn",id:"registercommandsin",level:3},{value:"Command format example:",id:"command-format-example",level:4},{value:"ClearTemp",id:"cleartemp",level:3}],p={toc:m},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"aloha"},"Aloha"),(0,a.kt)("p",null,"The base for the entire library, and the engine that makes it all run."),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"run"},"Run"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Aloha.Run(token: string, intents: number?)")),(0,a.kt)("p",null,"This is what gets your bot running. The first argument is required, and is your bot token, formatted ",(0,a.kt)("strong",{parentName:"p"},"without")," the ",(0,a.kt)("inlineCode",{parentName:"p"},"Bot ")," prefix. It adds it for you!"),(0,a.kt)("p",null,"Takes an optional second parameter for ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://discord.com/developers/docs/events/gateway#gateway-intents"},"intents")),". Aloha provides you with some base intents to use in the ",(0,a.kt)("strong",{parentName:"p"},"Enum")," module:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-luau"},"Aloha.Run(BOT_TOKEN_STRING, Enum.INTENTS.ALL)\n-- Let's get this ball rolling!\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"registerdefaultcommands"},"RegisterDefaultCommands"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Aloha.RegisterDefaultCommands(options: DefaultCommandOptions?) : {Command}")),(0,a.kt)("p",null,"Aloha comes with a few built-in application commands to make your life easier. This function will register all of them for you and allow them to be used on your bot. ",(0,a.kt)("strong",{parentName:"p"},"Note: None of these commands require privileged intents.")),(0,a.kt)("p",null,"Takes an optional dictionary of options, and returns an array of all the commands registered."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-luau"},"Aloha.RegisterDefaultCommands({rateLimit = 5})\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"registercommandsin"},"RegisterCommandsIn"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Aloha.RegisterCommandsIn(directory: string)")),(0,a.kt)("p",null,"This will allow you to register commands in a given directory. An example of command formatting is shown below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-luau"},'Aloha.RegisterCommandsIn("./Commands")\n')),(0,a.kt)("h4",{id:"command-format-example"},"Command format example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-luau"},'return {\n    Data = {\n        name = "uptime",\n        description = "shows the uptime of Aloha.",\n        type = Enum.APPLICATION_COMMAND_TYPE.CHAT_INPUT\n    },\n\n    Response = function(data: DiscordTypes.ApplicationCommandInteractionData)\n        return {\n            type = Enum.INTERACTION_CALLBACK_TYPE.CHANNEL_MESSAGE_WITH_SOURCE,\n            data = {\n                embeds = {\n                    Embed.new().setColor(Color3.new(252/255, 152/255, 3/255))\n                    .setDescription(`Aloha has been online for {Misc.FormatTime(os.time() - Bot.STARTED_AT)}`).finish()\n                },\n                flags = Enum.MESSAGE_FLAGS.EPHEMERAL\n            }\n        }\n        \n    end\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"cleartemp"},"ClearTemp"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Aloha.ClearTemp()")),(0,a.kt)("p",null,"Clears the ",(0,a.kt)("inlineCode",{parentName:"p"},"/temp")," folder. This is automatically called in ",(0,a.kt)("inlineCode",{parentName:"p"},"Run"),", but if for whatever reason you need to do it on runtime, you can!"))}d.isMDXComponent=!0}}]);