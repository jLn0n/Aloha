"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[368],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=m(n),c=o,h=u["".concat(s,".").concat(c)]||u[c]||p[c]||r;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var m=2;m<r;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4278:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:1},i="Aloha",l={unversionedId:"aloha",id:"aloha",title:"Aloha",description:"The base for the entire library, and the engine that makes it all run.",source:"@site/docs/aloha.md",sourceDirName:".",slug:"/aloha",permalink:"/Aloha/docs/aloha",draft:!1,editUrl:"https://github.com/thegalaxydev/Aloha/edit/main/docs/aloha.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",next:{title:"Hello World!",permalink:"/Aloha/docs/intro"}},s={},m=[{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>Aloha.Run(token: string, intents: number?)</code>",id:"aloharuntoken-string-intents-number",level:3},{value:"<code>Aloha.RegisterDefaultCommands(options: DefaultCommandOptions?) : {Command}</code>",id:"aloharegisterdefaultcommandsoptions-defaultcommandoptions--command",level:3},{value:"<code>Aloha.RegisterCommandsIn(directory: string)</code>",id:"aloharegistercommandsindirectory-string",level:3},{value:"Command format example:",id:"command-format-example",level:4},{value:"<code>Aloha.ClearTemp()</code>",id:"alohacleartemp",level:3}],d={toc:m},u="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"aloha"},"Aloha"),(0,o.kt)("p",null,"The base for the entire library, and the engine that makes it all run."),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"None")),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"aloharuntoken-string-intents-number"},(0,o.kt)("inlineCode",{parentName:"h3"},"Aloha.Run(token: string, intents: number?)")),(0,o.kt)("p",null,"This is what gets your bot running. The first argument is required, and is your bot token, formatted ",(0,o.kt)("strong",{parentName:"p"},"without")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"Bot ")," prefix. It adds it for you!"),(0,o.kt)("p",null,"Takes an optional second parameter for ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://discord.com/developers/docs/events/gateway#gateway-intents"},"intents")),". Aloha provides you with some base intents to use in the ",(0,o.kt)("strong",{parentName:"p"},"Enum")," module:\n| Enum             | Description                                       |\n|------------------|---------------------------------------------------|\n| INTENTS.ALL      | Includes all intents, with privileged intents.    |\n| INTENTS.NONE     | Includes no intents.                              |\n| INTENTS.DEFAULT  | Includes all intents WITHOUT privileged intents.  |"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-luau"},"Aloha.Run(BOT_TOKEN_STRING, Enum.INTENTS.ALL)\n-- Let's get this ball rolling!\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"aloharegisterdefaultcommandsoptions-defaultcommandoptions--command"},(0,o.kt)("inlineCode",{parentName:"h3"},"Aloha.RegisterDefaultCommands(options: DefaultCommandOptions?) : {Command}")),(0,o.kt)("p",null,"Aloha comes with a few built-in application commands to make your life easier. This function will register all of them for you and allow them to be used on your bot. ",(0,o.kt)("strong",{parentName:"p"},"Note: None of these commands require privileged intents.")),(0,o.kt)("p",null,"Takes an optional dictionary of options, and returns an array of all the commands registered.\n| Option     | Description                                      |\n|------------|--------------------------------------------------|\n| rateLimit  | Sets the bot's command rate limit, calculated per individual user. |"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-luau"},"Aloha.RegisterDefaultCommands({rateLimit = 5})\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"aloharegistercommandsindirectory-string"},(0,o.kt)("inlineCode",{parentName:"h3"},"Aloha.RegisterCommandsIn(directory: string)")),(0,o.kt)("p",null,"This will allow you to register commands in a given directory. An example of command formatting is shown below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-luau"},'Aloha.RegisterCommandsIn("./Commands")\n')),(0,o.kt)("h4",{id:"command-format-example"},"Command format example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-luau"},'return {\n    Data = {\n        name = "uptime",\n        description = "shows the uptime of Aloha.",\n        type = Enum.APPLICATION_COMMAND_TYPE.CHAT_INPUT\n    },\n\n    Response = function(data: DiscordTypes.ApplicationCommandInteractionData)\n        return {\n            type = Enum.INTERACTION_CALLBACK_TYPE.CHANNEL_MESSAGE_WITH_SOURCE,\n            data = {\n                embeds = {\n                    Embed.new().setColor(Color3.new(252/255, 152/255, 3/255))\n                    .setDescription(`Aloha has been online for {Misc.FormatTime(os.time() - Bot.STARTED_AT)}`).finish()\n                },\n                flags = Enum.MESSAGE_FLAGS.EPHEMERAL\n            }\n        }\n        \n    end\n}\n')),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"alohacleartemp"},(0,o.kt)("inlineCode",{parentName:"h3"},"Aloha.ClearTemp()")),(0,o.kt)("p",null,"Clears the ",(0,o.kt)("inlineCode",{parentName:"p"},"/temp")," folder. This is automatically called in ",(0,o.kt)("inlineCode",{parentName:"p"},"Run"),", but if for whatever reason you need to do it on runtime, you can!"))}p.isMDXComponent=!0}}]);